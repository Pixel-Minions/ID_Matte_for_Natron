# -*- coding: utf-8 -*-
#DO NOT EDIT THIS FILE
#This file was automatically generated by Natron PyPlug exporter version 2.

#Hand-written code should be added in a separate file named zID_MaskExt.py
#See http://natron.readthedocs.org/en/workshop/groups.html#adding-hand-written-code-callbacks-etc
#Note that Viewers are never exported

import NatronEngine
import sys

#Try to import the extensions file where callbacks and hand-written code should be located.
try:
    from zID_MaskExt import *
except ImportError:
    pass

def getPluginID():
    return "zabander.zidmask"

def getLabel():
    return "zID_Mask"

def getVersion():
    return 1

def getIconPath():
    return "zID_Mask.png"

def getGrouping():
    return "Ztools"

def getDescription():
    return "ID masking Tool"

def createInstance(app,group):

    #Create all nodes in the group
    lastNode = app.createNode("fr.inria.built-in.Output", 1, group)
    lastNode.setScriptName("Output1")
    lastNode.setLabel("Output1")
    lastNode.setPosition(1015.44, 341.153)
    lastNode.setSize(104, 43)
    lastNode.setColor(0.699992, 0.699992, 0.699992)
    groupOutput1 = lastNode

    param = lastNode.getParam("Source_layer_name")
    if param is not None:
        param.setValue("RGBA")
        param.setVisible(False)
        del param

    param = lastNode.getParam("Output_layer_name")
    if param is not None:
        param.setValue("RGBA")
        param.setVisible(False)
        del param

    param = lastNode.getParam("highDefUpstream")
    if param is not None:
        param.setVisible(False)
        del param

    del lastNode



    lastNode = app.createNode("fr.inria.built-in.Input", 1, group)
    lastNode.setScriptName("Input1")
    lastNode.setLabel("Input1")
    lastNode.setPosition(849.114, -148.062)
    lastNode.setSize(104, 43)
    lastNode.setColor(0.300008, 0.500008, 0.2)
    groupInput1 = lastNode

    param = lastNode.getParam("Output_layer_name")
    if param is not None:
        param.setValue("RGBA")
        param.setVisible(False)
        del param

    param = lastNode.getParam("highDefUpstream")
    if param is not None:
        param.setVisible(False)
        del param

    del lastNode



    lastNode = app.createNode("net.sf.openfx.ConstantPlugin", 1, group)
    lastNode.setScriptName("Constant1")
    lastNode.setLabel("color_picker")
    lastNode.setPosition(1012.32, -148.603)
    lastNode.setSize(104, 43)
    lastNode.setColor(0.300008, 0.500008, 0.2)
    groupConstant1 = lastNode

    param = lastNode.getParam("extent")
    if param is not None:
        options = param.getOptions()
        foundOption = False
        for i in range(len(options)):
            if options[i] == "Project":
                param.setValue(i)
                foundOption = True
                break
        if not foundOption:
            app.writeToScriptEditor("Could not set option for parameter extent of node Group1.Constant1")
        del param

    param = lastNode.getParam("format")
    if param is not None:
        param.setVisible(False)
        param.setEnabled(False, 0)
        del param

    param = lastNode.getParam("bottomLeft")
    if param is not None:
        param.setVisible(False)
        param.setEnabled(False, 0)
        param.setEnabled(False, 1)
        del param

    param = lastNode.getParam("size")
    if param is not None:
        param.setValue(1920, 0)
        param.setValue(1080, 1)
        param.setVisible(False)
        param.setEnabled(False, 0)
        param.setEnabled(False, 1)
        del param

    param = lastNode.getParam("interactive")
    if param is not None:
        param.setVisible(False)
        param.setEnabled(False, 0)
        del param

    param = lastNode.getParam("outputComponents")
    if param is not None:
        options = param.getOptions()
        foundOption = False
        for i in range(len(options)):
            if options[i] == "RGB":
                param.setValue(i)
                foundOption = True
                break
        if not foundOption:
            app.writeToScriptEditor("Could not set option for parameter outputComponents of node Group1.Constant1")
        del param

    param = lastNode.getParam("outputBitDepth")
    if param is not None:
        param.setVisible(False)
        del param

    param = lastNode.getParam("color")
    if param is not None:
        param.setValue(0, 0)
        param.setValue(0.5, 1)
        param.setValue(0, 2)
        param.setValue(1, 3)
        del param

    param = lastNode.getParam("Source_channels")
    if param is not None:
        param.setVisible(False)
        del param

    param = lastNode.getParam("Source_layer_name")
    if param is not None:
        param.setValue("RGBA")
        param.setVisible(False)
        del param

    param = lastNode.getParam("Output_layer_name")
    if param is not None:
        param.setValue("RGBA")
        param.setVisible(False)
        del param

    param = lastNode.getParam("NatronOfxParamProcessA")
    if param is not None:
        param.setVisible(False)
        del param

    param = lastNode.getParam("Node")
    if param is not None:
        param.setVisible(False)
        del param

    param = lastNode.getParam("highDefUpstream")
    if param is not None:
        param.setVisible(False)
        del param

    param = lastNode.getParam("Info")
    if param is not None:
        param.setVisible(False)
        del param

    del lastNode



    lastNode = app.createNode("fr.inria.openfx.SeExpr", 2, group)
    lastNode.setScriptName("SeExpr1")
    lastNode.setLabel("SeExpr1")
    lastNode.setPosition(1012.32, 95.3273)
    lastNode.setSize(104, 43)
    lastNode.setColor(0.300008, 0.500008, 0.2)
    groupSeExpr1 = lastNode

    param = lastNode.getParam("format")
    if param is not None:
        param.setVisible(False)
        param.setEnabled(False, 0)
        del param

    param = lastNode.getParam("bottomLeft")
    if param is not None:
        param.setVisible(False)
        param.setEnabled(False, 0)
        param.setEnabled(False, 1)
        del param

    param = lastNode.getParam("size")
    if param is not None:
        param.setValue(1920, 0)
        param.setValue(1080, 1)
        param.setVisible(False)
        param.setEnabled(False, 0)
        param.setEnabled(False, 1)
        del param

    param = lastNode.getParam("interactive")
    if param is not None:
        param.setVisible(False)
        param.setEnabled(False, 0)
        del param

    param = lastNode.getParam("x1")
    if param is not None:
        param.setVisible(False)
        del param

    param = lastNode.getParam("x2")
    if param is not None:
        param.setVisible(False)
        del param

    param = lastNode.getParam("x3")
    if param is not None:
        param.setVisible(False)
        del param

    param = lastNode.getParam("x4")
    if param is not None:
        param.setVisible(False)
        del param

    param = lastNode.getParam("x5")
    if param is not None:
        param.setVisible(False)
        del param

    param = lastNode.getParam("x6")
    if param is not None:
        param.setVisible(False)
        del param

    param = lastNode.getParam("x7")
    if param is not None:
        param.setVisible(False)
        del param

    param = lastNode.getParam("x8")
    if param is not None:
        param.setVisible(False)
        del param

    param = lastNode.getParam("x9")
    if param is not None:
        param.setVisible(False)
        del param

    param = lastNode.getParam("x10")
    if param is not None:
        param.setVisible(False)
        del param

    param = lastNode.getParam("pos1")
    if param is not None:
        param.setVisible(False)
        del param

    param = lastNode.getParam("pos2")
    if param is not None:
        param.setVisible(False)
        del param

    param = lastNode.getParam("pos3")
    if param is not None:
        param.setVisible(False)
        del param

    param = lastNode.getParam("pos4")
    if param is not None:
        param.setVisible(False)
        del param

    param = lastNode.getParam("pos5")
    if param is not None:
        param.setVisible(False)
        del param

    param = lastNode.getParam("pos6")
    if param is not None:
        param.setVisible(False)
        del param

    param = lastNode.getParam("pos7")
    if param is not None:
        param.setVisible(False)
        del param

    param = lastNode.getParam("pos8")
    if param is not None:
        param.setVisible(False)
        del param

    param = lastNode.getParam("pos9")
    if param is not None:
        param.setVisible(False)
        del param

    param = lastNode.getParam("pos10")
    if param is not None:
        param.setVisible(False)
        del param

    param = lastNode.getParam("color1")
    if param is not None:
        param.setVisible(False)
        del param

    param = lastNode.getParam("color2")
    if param is not None:
        param.setVisible(False)
        del param

    param = lastNode.getParam("color3")
    if param is not None:
        param.setVisible(False)
        del param

    param = lastNode.getParam("color4")
    if param is not None:
        param.setVisible(False)
        del param

    param = lastNode.getParam("color5")
    if param is not None:
        param.setVisible(False)
        del param

    param = lastNode.getParam("color6")
    if param is not None:
        param.setVisible(False)
        del param

    param = lastNode.getParam("color7")
    if param is not None:
        param.setVisible(False)
        del param

    param = lastNode.getParam("color8")
    if param is not None:
        param.setVisible(False)
        del param

    param = lastNode.getParam("color9")
    if param is not None:
        param.setVisible(False)
        del param

    param = lastNode.getParam("color10")
    if param is not None:
        param.setVisible(False)
        del param

    param = lastNode.getParam("script")
    if param is not None:
        param.setValue("#Just copy the source RGB\nCs1 == Cs2\n")
        del param

    param = lastNode.getParam("alphaScript")
    if param is not None:
        param.setValue("#Just copy the source alpha\nCs1 == Cs2")
        del param

    param = lastNode.getParam("validate")
    if param is not None:
        param.setVisible(False)
        del param

    param = lastNode.getParam("")
    if param is not None:
        param.setValue("RGBA.A")
        param.setVisible(False)
        del param

    param = lastNode.getParam("Node")
    if param is not None:
        param.setVisible(False)
        del param

    param = lastNode.getParam("highDefUpstream")
    if param is not None:
        param.setVisible(False)
        del param

    param = lastNode.getParam("Info")
    if param is not None:
        param.setVisible(False)
        del param

    del lastNode



    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot1")
    lastNode.setLabel("Dot1")
    lastNode.setPosition(894.114, 109.327)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.699992, 0.699992, 0.699992)
    groupDot1 = lastNode

    del lastNode



    lastNode = app.createNode("fr.inria.openfx.OIIOResize", 1, group)
    lastNode.setScriptName("Resize2")
    lastNode.setLabel("down_scale")
    lastNode.setPosition(1012.32, 182.77)
    lastNode.setSize(104, 43)
    lastNode.setColor(0.699992, 0.300008, 0.100008)
    groupResize2 = lastNode

    param = lastNode.getParam("type")
    if param is not None:
        options = param.getOptions()
        foundOption = False
        for i in range(len(options)):
            if options[i] == "Scale":
                param.setValue(i)
                foundOption = True
                break
        if not foundOption:
            app.writeToScriptEditor("Could not set option for parameter type of node Group1.Resize2")
        del param

    param = lastNode.getParam("format")
    if param is not None:
        options = param.getOptions()
        foundOption = False
        for i in range(len(options)):
            if options[i] == "HD                  1920x1080":
                param.setValue(i)
                foundOption = True
                break
        if not foundOption:
            app.writeToScriptEditor("Could not set option for parameter format of node Group1.Resize2")
        param.setVisible(False)
        del param

    param = lastNode.getParam("size")
    if param is not None:
        param.setValue(1920, 0)
        param.setValue(1080, 1)
        param.setVisible(False)
        del param

    param = lastNode.getParam("preservePAR")
    if param is not None:
        param.setVisible(False)
        del param

    param = lastNode.getParam("scale")
    if param is not None:
        param.setValue(0.5, 0)
        param.setValue(0.5, 1)
        del param

    param = lastNode.getParam("filter")
    if param is not None:
        options = param.getOptions()
        foundOption = False
        for i in range(len(options)):
            if options[i] == "Impulse (no interpolation)":
                param.setValue(i)
                foundOption = True
                break
        if not foundOption:
            app.writeToScriptEditor("Could not set option for parameter filter of node Group1.Resize2")
        del param

    param = lastNode.getParam("Source_channels")
    if param is not None:
        param.setVisible(False)
        del param

    param = lastNode.getParam("Source_layer_name")
    if param is not None:
        param.setValue("RGBA")
        param.setVisible(False)
        del param

    param = lastNode.getParam("Output_layer_name")
    if param is not None:
        param.setValue("All")
        param.setVisible(False)
        del param

    param = lastNode.getParam("Node")
    if param is not None:
        param.setVisible(False)
        del param

    param = lastNode.getParam("highDefUpstream")
    if param is not None:
        param.setVisible(False)
        del param

    param = lastNode.getParam("Info")
    if param is not None:
        param.setVisible(False)
        del param

    del lastNode



    lastNode = app.createNode("net.sf.openfx.NoOpPlugin", 1, group)
    lastNode.setScriptName("NoOp1")
    lastNode.setLabel("Get_size")
    lastNode.setPosition(849.114, 0.166444)
    lastNode.setSize(104, 43)
    lastNode.setColor(0.699992, 0.699992, 0.699992)
    groupNoOp1 = lastNode

    param = lastNode.getParam("outputPremult")
    if param is not None:
        param.setEnabled(False, 0)
        del param

    param = lastNode.getParam("outputPixelAspectRatio")
    if param is not None:
        param.setEnabled(False, 0)
        del param

    param = lastNode.getParam("outputFrameRate")
    if param is not None:
        param.setEnabled(False, 0)
        del param

    param = lastNode.getParam("Source_channels")
    if param is not None:
        param.setVisible(False)
        del param

    param = lastNode.getParam("Source_layer_name")
    if param is not None:
        param.setValue("RGBA")
        param.setVisible(False)
        del param

    param = lastNode.getParam("Output_layer_name")
    if param is not None:
        param.setValue("All")
        param.setVisible(False)
        del param

    param = lastNode.getParam("highDefUpstream")
    if param is not None:
        param.setVisible(False)
        del param


    #Create the user-parameters
    lastNode.userNatron = lastNode.createPageParam("userNatron", "User")
    param = lastNode.createInt2DParam("get_size", "Get_Size")
    param.setMinimum(0, 0)
    param.setMaximum(0, 0)
    param.setDisplayMinimum(0, 0)
    param.setDisplayMaximum(0, 0)
    param.setMinimum(0, 1)
    param.setMaximum(0, 1)
    param.setDisplayMinimum(0, 1)
    param.setDisplayMaximum(0, 1)

    #Add the param to the page
    lastNode.userNatron.addParam(param)

    #Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    param.setValue(3840, 0)
    param.setValue(2160, 1)
    lastNode.get_size = param
    del param

    #Refresh the GUI with the newly created parameters
    lastNode.refreshUserParamsGUI()
    del lastNode



    lastNode = app.createNode("fr.inria.openfx.OIIOResize", 1, group)
    lastNode.setScriptName("Resize1")
    lastNode.setLabel("Resize1")
    lastNode.setPosition(1012.32, -6.72861)
    lastNode.setSize(104, 43)
    lastNode.setColor(0.699992, 0.300008, 0.100008)
    groupResize1 = lastNode

    param = lastNode.getParam("type")
    if param is not None:
        options = param.getOptions()
        foundOption = False
        for i in range(len(options)):
            if options[i] == "Size":
                param.setValue(i)
                foundOption = True
                break
        if not foundOption:
            app.writeToScriptEditor("Could not set option for parameter type of node Group1.Resize1")
        del param

    param = lastNode.getParam("format")
    if param is not None:
        options = param.getOptions()
        foundOption = False
        for i in range(len(options)):
            if options[i] == "HD                  1920x1080":
                param.setValue(i)
                foundOption = True
                break
        if not foundOption:
            app.writeToScriptEditor("Could not set option for parameter format of node Group1.Resize1")
        param.setVisible(False)
        del param

    param = lastNode.getParam("size")
    if param is not None:
        param.setValue(3840, 0)
        param.setValue(2160, 1)
        del param

    param = lastNode.getParam("preservePAR")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("scale")
    if param is not None:
        param.setVisible(False)
        del param

    param = lastNode.getParam("filter")
    if param is not None:
        options = param.getOptions()
        foundOption = False
        for i in range(len(options)):
            if options[i] == "Impulse (no interpolation)":
                param.setValue(i)
                foundOption = True
                break
        if not foundOption:
            app.writeToScriptEditor("Could not set option for parameter filter of node Group1.Resize1")
        del param

    param = lastNode.getParam("Source_channels")
    if param is not None:
        param.setVisible(False)
        del param

    param = lastNode.getParam("Source_layer_name")
    if param is not None:
        param.setValue("RGBA")
        param.setVisible(False)
        del param

    param = lastNode.getParam("Output_layer_name")
    if param is not None:
        param.setValue("All")
        param.setVisible(False)
        del param

    param = lastNode.getParam("NatronOfxParamProcessA")
    if param is not None:
        param.setVisible(False)
        del param

    param = lastNode.getParam("Node")
    if param is not None:
        param.setVisible(False)
        del param

    param = lastNode.getParam("highDefUpstream")
    if param is not None:
        param.setVisible(False)
        del param

    param = lastNode.getParam("Info")
    if param is not None:
        param.setVisible(False)
        del param

    del lastNode




    #Create the parameters of the group node the same way we did for all internal nodes
    lastNode = group
    param = lastNode.getParam("highDefUpstream")
    if param is not None:
        param.setVisible(False)
        del param

    param = lastNode.getParam("Info")
    if param is not None:
        param.setVisible(False)
        del param


    #Create the user-parameters
    lastNode.userNatron = lastNode.createPageParam("userNatron", "User")
    param = lastNode.createStringParam("z_id_mask_tool", "Z ID Mask tool")
    param.setType(NatronEngine.StringParam.TypeEnum.eStringTypeLabel)

    #Add the param to the page
    lastNode.userNatron.addParam(param)

    #Set param properties
    param.setHelp("Developed by HuargoVfx\nBased in the script nMask by Toxik\nRecommendations:\n- Use twice resolution of the beauty pass.\n- Use non AA images.\n\n")
    param.setAddNewLine(True)
    param.setEvaluateOnChange(False)
    param.setAnimationEnabled(False)
    param.setDefaultValue("zID Mask")
    lastNode.z_id_mask_tool = param
    del param

    param = lastNode.createColorParam("Constant1color", "Color Picker", True)
    param.setMinimum(-2.14748e+09, 0)
    param.setMaximum(2.14748e+09, 0)
    param.setDisplayMinimum(0, 0)
    param.setDisplayMaximum(1, 0)
    param.setMinimum(-2.14748e+09, 1)
    param.setMaximum(2.14748e+09, 1)
    param.setDisplayMinimum(0, 1)
    param.setDisplayMaximum(1, 1)
    param.setMinimum(-2.14748e+09, 2)
    param.setMaximum(2.14748e+09, 2)
    param.setDisplayMinimum(0, 2)
    param.setDisplayMaximum(1, 2)
    param.setMinimum(-2.14748e+09, 3)
    param.setMaximum(2.14748e+09, 3)
    param.setDisplayMinimum(0, 3)
    param.setDisplayMaximum(1, 3)

    #Add the param to the page
    lastNode.userNatron.addParam(param)

    #Set param properties
    param.setHelp("Color to fill the image with.")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    param.setValue(0.5, 1)
    param.setValue(1, 3)
    lastNode.Constant1color = param
    del param

    param = lastNode.createChoiceParam("Resize2filter", "Filter")
    entries = [ ("Impulse (no interpolation)", ""),
    ("box", ""),
    ("triangle", ""),
    ("gaussian", ""),
    ("sharp-gaussian", ""),
    ("catrom", ""),
    ("blackman-harris", ""),
    ("sinc", ""),
    ("lanczos3", ""),
    ("radial-lanczos3", ""),
    ("mitchell", ""),
    ("bspline", ""),
    ("disk", ""),
    ("cubic", ""),
    ("keys", ""),
    ("simon", ""),
    ("rifman", "")]
    param.setOptions(entries)
    del entries
    param.setDefaultValue(8)

    #Add the param to the page
    lastNode.userNatron.addParam(param)

    #Set param properties
    param.setHelp("The filter used to resize. Lanczos3 is great for downscaling and blackman-harris is great for upscaling.")
    param.setAddNewLine(True)
    param.setAnimationEnabled(False)
    options = param.getOptions()
    foundOption = False
    for i in range(len(options)):
        if options[i] == "Impulse (no interpolation)":
            param.setValue(i)
            foundOption = True
            break
    if not foundOption:
        app.writeToScriptEditor("Could not set option for parameter Resize2filter of node Group1")
    lastNode.Resize2filter = param
    del param

    param = lastNode.createDouble2DParam("Resize2scale", "Scale Ratio")
    param.setMinimum(0, 0)
    param.setDisplayMinimum(-1.79769e+308, 0)
    param.setDisplayMaximum(1.79769e+308, 0)
    param.setDefaultValue(1, 0)
    param.setMinimum(0, 1)
    param.setDisplayMinimum(-1.79769e+308, 1)
    param.setDisplayMaximum(1.79769e+308, 1)
    param.setDefaultValue(1, 1)

    #Add the param to the page
    lastNode.userNatron.addParam(param)

    #Set param properties
    param.setHelp("If ID Resolution is 2:1 to the beauty put 0.5\nIf ID Resolution is 1:1 to the beauty put 1.0\netc...")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    param.setValue(0.5, 0)
    param.setValue(0.5, 1)
    lastNode.Resize2scale = param
    del param

    param = lastNode.createInt2DParam("get_Res", "ID_Res")
    param.setDisplayMinimum(0, 0)
    param.setDisplayMaximum(0, 0)
    param.setDisplayMinimum(0, 1)
    param.setDisplayMaximum(0, 1)

    #Add the param to the page
    lastNode.userNatron.addParam(param)

    #Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setAnimationEnabled(False)
    param.setValue(3840, 0)
    param.setValue(2160, 1)
    param.setVisible(False)
    lastNode.get_Res = param
    del param

    #Refresh the GUI with the newly created parameters
    lastNode.setPagesOrder(['userNatron', 'Node', 'Info'])
    lastNode.refreshUserParamsGUI()
    del lastNode

    #Now that all nodes are created we can connect them together, restore expressions
    groupOutput1.connectInput(0, groupResize2)

    param = groupConstant1.getParam("color")
    param.setExpression("thisGroup.Constant1color.get()[dimension]", False, 0)
    param.setExpression("thisGroup.Constant1color.get()[dimension]", False, 1)
    param.setExpression("thisGroup.Constant1color.get()[dimension]", False, 2)
    param.setExpression("thisGroup.Constant1color.get()[dimension]", False, 3)
    del param

    groupSeExpr1.connectInput(0, groupDot1)
    groupSeExpr1.connectInput(1, groupResize1)

    groupDot1.connectInput(0, groupNoOp1)

    groupResize2.connectInput(0, groupSeExpr1)
    param = groupResize2.getParam("scale")
    param.setExpression("thisGroup.Resize2scale.get()[dimension]", False, 0)
    param.setExpression("thisGroup.Resize2scale.get()[dimension]", False, 1)
    del param
    param = groupResize2.getParam("filter")
    param.setExpression("thisGroup.Resize2filter.get()", False, 0)
    del param

    groupNoOp1.connectInput(0, groupInput1)
    param = groupNoOp1.getParam("get_size")
    param.setExpression("thisGroup.get_Res.get()[dimension]", False, 0)
    param.setExpression("thisGroup.get_Res.get()[dimension]", False, 1)
    del param

    groupResize1.connectInput(0, groupConstant1)
    param = groupResize1.getParam("size")
    param.setExpression("thisGroup.get_Res.get()[dimension]", False, 0)
    param.setExpression("thisGroup.get_Res.get()[dimension]", False, 1)
    del param

    try:
        extModule = sys.modules["zID_MaskExt"]
    except KeyError:
        extModule = None
    if extModule is not None and hasattr(extModule ,"createInstanceExt") and hasattr(extModule.createInstanceExt,"__call__"):
        extModule.createInstanceExt(app,group)
